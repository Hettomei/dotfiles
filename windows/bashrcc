# https://stackoverflow.com/questions/19454837/bash-histsize-vs-histfilesize/19454838#19454838
# For xubuntu terminal please write this in /etc/bash.bashrc
HISTSIZE=20000
HISTFILESIZE=999999
HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "

# histappend :
# bash history is only saved when close terminal, not after each command and this fixes it

# histverify https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html :
# If set, and Readline is being used, the results of history substitution are not immediately passed to the shell parser.
# Instead, the resulting line is loaded into the Readline editing buffer, allowing further modification.
shopt -s histappend histverify

alias e='emacs -nw'
alias ee=emacs
alias v=vim
alias g=git
alias ll='ls -alh'

alias bc="echo 'bc -l' && bc -l"
alias pps='ps aux | grep'

alias r='rg -M 240 --max-columns-preview --sort path --hidden --glob "!.git"'
alias rglarger='rg -uuuuuu --ignore-case'

alias fd=fdfind

### git alias
# Why start with 'gg' to simulate 'g command'
# also, I always forget the command,
# if I press gg<Tab> I know...
# go to git root
alias ggr='cd $(git rev-parse --show-toplevel)'

# go to next commit on a given branch
ggnext() {
  _BRANCH_=$1
  if [ -z "$_BRANCH_" ]; then
    _BRANCH_=master
    echo branch is $_BRANCH_
    echo
  fi
  __CURRENT_COMMIT__=$(git rev-parse HEAD)
  git checkout $(git log --format='%H' $_BRANCH_ | grep -B1 $__CURRENT_COMMIT__ | grep -v $__CURRENT_COMMIT__ || echo $_BRANCH_)
}

ggprev() {
  git checkout HEAD^
}

# gg -> git
# v -> vim
# take all file present in git status and edit it
ggv() {
  nvim -O $(git status --porcelain | awk '{ print $2 }')
}

export EDITOR=vim
export VISUAL=vim
# -R -> display ansi color
# -X -> sometimes help to not clear the screen
# -F -> quit if one string
# --chop-long-lines -> do not wrap to next line # Sometimes usefull
export LESS='-R -X -F'

[ -f $HOME/.bashrc_not_in_git ] && source $HOME/.bashrc_not_in_git

set -o vi
bind 'set completion-ignore-case on'
bind '"\C-a": beginning-of-line' # ctrl-a in insert mode
bind '"\C-e": end-of-line' # ctrl-e in insert mode
bind '"\e[A": history-search-backward' # search only previous string on key up
bind '"\e[B": history-search-forward' # search only next string on key down
# This next 2 commands allow me to erase word on ctrl-w
# found on http://unix.stackexchange.com/questions/27927/is-it-possible-to-configure-ctrl-w-delete-word
stty werase undef
bind '\C-w:backward-kill-word'

if [ -d "$HOME/mingw64/bin" ] ; then
  export PATH=/mingw64/bin:$PATH
fi


cd ~/programmes/codingame/cplusplus
